{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "operation": "list",
        "queryFilters": {
          "name": [
            {
              "value": "={{ $json.folder.replace(/^\\/+/, '') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 2,
      "position": [
        416,
        -224
      ],
      "name": "Search Folder",
      "id": "f2cd44d1-23a3-4829-8629-9ab0651e8650",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HBu1nDLTZinDtIDn",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Access first item from previous node\nconst folderItem = $input.first().json;\n\nif (folderItem && folderItem.id) {\n    // Folder found\n    return [{\n        json: {\n            folderId: folderItem.id,\n            folderName: folderItem.name,\n            from: folderItem.from || $json.from\n        }\n    }];\n} else {\n    // Folder not found\n    return [{\n        json: {\n            folderId: null,\n            from: folderItem.from || $json.from,\n            reply: `‚ùå Folder not found: ${folderItem.folder || ''}`\n        }\n    }];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        -224
      ],
      "name": "Get Folder ID",
      "id": "d5fadb44-b830-4329-8842-7918b8f17027"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.folderId !== null}}",
              "value2": true
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        880,
        -224
      ],
      "name": "Folder Exists?",
      "id": "d905a6b9-65f6-40d1-a677-312f6fa84281"
    },
    {
      "parameters": {
        "operation": "list",
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 2,
      "position": [
        1072,
        -224
      ],
      "name": "List Files in Folder",
      "id": "cbeef72b-f3fb-4c83-ba93-f4ddebb50a08",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HBu1nDLTZinDtIDn",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Take reply or default message\nlet replyText = $json.reply || 'No files found in folder.';\n\n// Truncate strictly to 1600 characters\nreplyText = replyText.substring(0, 1600);\n\n// Return for Twilio WhatsApp\nreturn [{\n  json: {\n    reply: replyText,\n    from: 'whatsapp:+14155238886',  // Your Twilio WhatsApp number\n    to: $json.from                   // Sender's WhatsApp number\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1488,
        -224
      ],
      "id": "d9d2d669-4578-427f-a542-b462e7c410e3",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "whatsapp",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -912,
        240
      ],
      "name": "Webhook2",
      "id": "bb099bbe-36be-4727-910d-cd21d8731831",
      "webhookId": "3ab94d55-412b-45da-a0ba-c08941755111"
    },
    {
      "parameters": {
        "jsCode": "// Handle nested payload (Twilio sends body in different formats)\nconst payload = $json.Body ? $json : ($json.body ? $json.body : $json);\n\n// Message body\nconst body = String(payload.Body || payload.body || '').trim();\n\n// Sender\nconst from = payload.From || payload.from || 'unknown';\n\n// Media info\nconst mediaUrl = payload.MediaUrl0 || payload.mediaurl0 || null;\nconst mediaType = payload.MediaContentType0 || payload.mediacontenttype0 || null;\n\n// Defaults\nlet command = null;\nlet folder = null;\nlet file = null;\nlet newName = null;\nlet destFolder = null; // For MOVE always Archive\n\n//------------------------------------//\n// Command parsing\n//------------------------------------//\n\n// DELETE /folder/file\nconst deleteMatch = body.match(/^DELETE\\/([^\\/\\s]+)\\/(.+)$/i);\nif (deleteMatch) {\n    command = 'DELETE';\n    folder = deleteMatch[1];\n    file = deleteMatch[2];\n}\n\n// MOVE /folder/file  (always move to Archive)\nelse if (body.match(/^MOVE\\s+/i)) {\n    const moveMatch = body.match(/^MOVE\\s+\\/([^\\/]+)\\/(.+)$/i);\n    if (moveMatch) {\n        command = 'MOVE';\n        folder = moveMatch[1];\n        file = moveMatch[2];\n        destFolder = 'Archive';\n    }\n}\n\n// RENAME /folder/oldFile newname NewFileName\nelse if (body.match(/^RENAME\\//i)) {\n    const renameMatch = body.match(/^RENAME\\/([^\\/\\s]+)\\/([^\\s]+)\\s+newname\\s+(.+)$/i);\n    if (renameMatch) {\n        command = 'RENAME';\n        folder = renameMatch[1];\n        file = renameMatch[2];\n        newName = renameMatch[3];\n    }\n}\n\n// UPLOAD /folder file.pdf  OR  UPLOAD folder/file.pdf\nelse {\n    const matchUpload = body.match(/UPLOAD\\s+(?:\\/?([^\\/\\s]+))\\/?([^\\s]+)/i);\n    if (matchUpload) {\n        command = 'UPLOAD';\n        folder = matchUpload[1];\n        newName = matchUpload[2];\n    }\n    else {\n        // SUMMARY /folder\n        const matchSummary = body.match(/SUMMARY\\s+\\/?([^\\s]+)/i);\n        if (matchSummary) {\n            command = 'SUMMARY';\n            folder = matchSummary[1];\n        }\n        else {\n            // fallback LIST command\n            const parts = body.split(/\\s+/);\n            command = (parts[0] || '').toUpperCase();\n            folder = parts[1] || null;\n        }\n    }\n}\n\n//------------------------------------//\n// Return structured JSON\n//------------------------------------//\nreturn [{\n    json: {\n        command,\n        folder,\n        file,\n        destFolder,   // only used for MOVE\n        newName,      // only for RENAME/UPLOAD\n        mediaUrl,     // only set if file was uploaded via WhatsApp\n        mediaType,\n        from,\n        rawText: body\n    }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -640,
        240
      ],
      "name": "Parse Command2",
      "id": "8cf6814e-2884-4286-b524-bc4c8adddf53"
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{ $json.command }}",
        "rules": {
          "rules": [
            {
              "value2": "LIST"
            },
            {
              "value2": "DELETE",
              "output": 1
            },
            {
              "value2": "MOVE",
              "output": 2
            }
          ]
        },
        "fallbackOutput": 3
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [
        -128,
        80
      ],
      "name": "Switch Command2",
      "id": "3c19e58c-54c7-43ec-ac9f-3e400ceb984d"
    },
    {
      "parameters": {
        "from": "=whatsapp:+14155238886",
        "to": "=whatsapp:+916281924785\n",
        "message": "={{ $json.reply }}",
        "options": {}
      },
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        2288,
        -32
      ],
      "name": "Send Reply2",
      "id": "87ed1a87-7d6a-4f17-a3c0-30ae96068286",
      "credentials": {
        "twilioApi": {
          "id": "SSLm33P2G1VfN5kS",
          "name": "Twilio account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const files = $items().map(item => item.json); // get all files from previous node\n\nif (files.length > 0) {\n    const names = files.map(f => `‚Ä¢ ${f.name} (${f.id})`).join('\\n');\n    return [{\n        json: {\n            reply: `üìÑ Files in folder:\\n${names}`,\n            from: 'whatsapp:+916281924785',  // Twilio WhatsApp number\n            to: $json.from                   // Incoming WhatsApp number\n        }\n    }];\n} else {\n    return [{\n        json: {\n            reply: 'No files found in folder.',\n            from: 'whatsapp:+916281924785',\n            to: $json.from\n        }\n    }];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1296,
        -224
      ],
      "name": "Format List2",
      "id": "251f14e7-4105-4a9d-9244-753025c7bec9"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.files && $json.files.length > 0 }}",
              "value2": true
            }
          ]
        }
      },
      "name": "File Exists?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1232,
        0
      ],
      "id": "12f66523-6f3e-46ec-b567-1c5352b1b075"
    },
    {
      "parameters": {
        "operation": "delete",
        "fileId": "={{ $json.files[0].id }}"
      },
      "name": "Delete File",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 2,
      "position": [
        1456,
        0
      ],
      "id": "9d6cdcb4-05af-4954-84ca-1787343cdbc2",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HBu1nDLTZinDtIDn",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Send WhatsApp reply\n\n// Try to get file name from current json or from files array\nconst fileName = $json.file || \n                 ($json.files && $json.files[0] ? $json.files[0].name : 'Unknown file');\n\nconst success = $json.success ?? true;  // default true unless Delete node passes success:false\n\nreturn [{\n  json: {\n    reply: success \n      ? `‚úÖ File deleted successfully` \n      : `‚ùå Failed to delete file: ${fileName}`,\n    from: 'whatsapp:+14155238886',\n    to: $json.from\n  }\n}];\n"
      },
      "name": "Send Reply",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1680,
        0
      ],
      "id": "33e72b79-8e1d-464c-9ac5-57d1cb30ca1c"
    },
    {
      "parameters": {
        "operation": "list",
        "queryFilters": {
          "name": [
            {
              "value": "={{ $json.folder }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Get Folder ID2",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 2,
      "position": [
        352,
        0
      ],
      "id": "4133b325-acd0-4e66-8a29-1345ec13f69d",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HBu1nDLTZinDtIDn",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.id !== undefined && $json.id !== ''}}",
              "value2": true
            }
          ]
        }
      },
      "name": "Folder Exists?1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        576,
        0
      ],
      "id": "35daf858-1840-4143-9306-725022ebc971"
    },
    {
      "parameters": {
        "operation": "list",
        "options": {}
      },
      "name": "Get File ID1",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 2,
      "position": [
        800,
        0
      ],
      "id": "cb42b16e-8243-4739-99b6-7d965114d62e",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HBu1nDLTZinDtIDn",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get target file name from the parsed command\nconst targetFileName = $items(\"Parse Command2\")[0].json.file.toLowerCase();\nconst from = $items(\"Parse Command2\")[0].json.from;\n\n// Get all files from Get File ID1\nconst matchedFiles = $items(\"Get File ID1\")\n  .map(item => item.json)\n  .filter(f => f.name.toLowerCase().includes(targetFileName));\n\nreturn matchedFiles.length > 0\n    ? [{ json: { files: [matchedFiles[0]], from, file: targetFileName } }]\n    : [{ json: { files: [], from, file: targetFileName } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1008,
        0
      ],
      "id": "a11f365a-43a7-4b24-843c-2ae90402c2f0",
      "name": "Code in JavaScript2"
    },
    {
      "parameters": {
        "operation": "list",
        "queryFilters": {
          "name": [
            {
              "value": "={{$json.file}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Get Source Folder ID",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 2,
      "position": [
        496,
        224
      ],
      "id": "fa77093f-5dbb-48cd-a411-8f269e5913b1",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HBu1nDLTZinDtIDn",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.files && $json.files.length > 0 }}",
              "value2": true
            }
          ]
        }
      },
      "name": "File Exists?1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1312,
        224
      ],
      "id": "90c898ee-2970-45df-9876-6bcb751fd6d8"
    },
    {
      "parameters": {
        "operation": "list",
        "options": {}
      },
      "name": "Get File ID2",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 2,
      "position": [
        816,
        240
      ],
      "id": "516f1a03-5922-4767-8fcd-a8a6bb89e688",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HBu1nDLTZinDtIDn",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get target file name from the parsed command\nconst targetFileName = $items(\"Parse Command2\")[0].json.file.toLowerCase();\nconst from = $items(\"Parse Command2\")[0].json.from;\n\n// Get all files from Get File ID1\nconst matchedFiles = $items(\"Get File ID2\")\n  .map(item => item.json)\n  .filter(f => f.name.toLowerCase().includes(targetFileName));\n\nreturn matchedFiles.length > 0\n    ? [{ json: { files: [matchedFiles[0]], from, file: targetFileName } }]\n    : [{ json: { files: [], from, file: targetFileName } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1088,
        224
      ],
      "id": "bb0cd401-5124-426f-bcd8-88da9a74fbd6",
      "name": "Code in JavaScript3"
    },
    {
      "parameters": {
        "operation": "update",
        "fileId": "={{ $json.files[0].id }}",
        "updateFields": {},
        "options": {}
      },
      "name": "Move File to Archive",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 2,
      "position": [
        1584,
        224
      ],
      "id": "52e8ac8f-23ee-4785-b8d0-20db2e329644",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HBu1nDLTZinDtIDn",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const from = $json.from;\nconst files = $json.files || [];\n\nif (files.length > 0) {\n    const fileName = files[0].name;\n    return [{ json: { reply: `‚úÖ File moved to Archive: ${fileName}`, from: 'whatsapp:+14155238886', to: from } }];\n} else {\n    return [{ json: { reply: `‚úÖ  file found and moved .`, from: 'whatsapp:+14155238886', to: from } }];\n}\n"
      },
      "name": "Send Reply3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1792,
        208
      ],
      "id": "f875af0b-293d-4c7a-b38b-f22fcd19f4cb"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "folder",
        "name": "={{ $json.folder }}",
        "options": {}
      },
      "name": "List Folders",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 1,
      "position": [
        528,
        688
      ],
      "id": "14bc67f4-8d55-4160-adc2-b135dd5035b3",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HBu1nDLTZinDtIDn",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const folderName = $items('Parse Command2')[0].json.folder;\nconst results = $items('List Folders') || [];\nlet folderId = null;\n\n// Find exact match\nfor (const f of results) {\n  if (f.json.name.toLowerCase() === folderName.toLowerCase()) {\n    folderId = f.json.id;\n    break;\n  }\n}\n\nreturn [{ json: { folderName, folderId } }];\n"
      },
      "name": "Check Folder Exists1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        736,
        672
      ],
      "id": "29585bd9-9753-4853-b011-e146ac180bf7"
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "url": "={{$items('Parse Command2')[0].json.mediaUrl}}",
        "responseFormat": "file",
        "options": {}
      },
      "name": "Download File1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        960,
        672
      ],
      "id": "185367ed-7ccb-41b6-8b4c-98bc63adeeed",
      "credentials": {
        "httpBasicAuth": {
          "id": "BUlKBzpxruDjtzac",
          "name": "Unnamed credential"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "binaryData": true,
        "name": "new",
        "parents": [
          "={{ $json.folderId }}"
        ],
        "options": {}
      },
      "name": "Upload to Drive1",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 1,
      "position": [
        1200,
        672
      ],
      "id": "0e8c079a-5ae4-4a36-b140-dcd5c13139f6",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HBu1nDLTZinDtIDn",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const parseNode = $items('Parse Command2')[0].json; // Correct node name\nconst folderName = $json.folderId ? $json.folderName : 'your folder'; // fallback if folder creation not needed\n\nreturn [{\n  json: {\n    reply: `‚úÖ File uploaded successfully to '${folderName}'`,\n    to: parseNode.from\n  }\n}];\n"
      },
      "name": "Prepare Reply1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1456,
        672
      ],
      "id": "2d390d1b-a1fb-41eb-8897-f0653e397cae"
    },
    {
      "parameters": {
        "from": "whatsapp:+14155238886",
        "to": "={{$json.to}}",
        "message": "={{$json.reply}}",
        "options": {}
      },
      "name": "Send WhatsApp Reply2",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        1712,
        672
      ],
      "id": "83084d95-056e-46f9-b923-370d2e1edfee",
      "credentials": {
        "twilioApi": {
          "id": "SSLm33P2G1VfN5kS",
          "name": "Twilio account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "list",
        "queryFilters": {
          "name": [
            {
              "value": "={{ $json.folder }}"
            }
          ]
        },
        "options": {}
      },
      "name": "List Files for Summary",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 1,
      "position": [
        560,
        896
      ],
      "id": "49cf3cef-b978-4c62-960c-c1f942251185",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HBu1nDLTZinDtIDn",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const parseNode = $items('Parse Command2')[0].json;\n\n// Try different possible fields from AI node\nconst summary = $json.text || $json.output || \"‚ö†Ô∏è No summary found\";\n\nreturn [{\n  json: {\n    reply: `üìÑ Summary of folder '${parseNode.folder}':\\n${summary}`,\n    to: parseNode.from\n  }\n}];\n"
      },
      "name": "Prepare Summary Reply",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1088,
        896
      ],
      "id": "ce80b812-de89-48ab-a3d5-4efe3ed2c4cb"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an assistant that summarizes the contents of a folder based on file names. \n\nFolder name: {{ $('Switch Command').item.json.folder }}\n\nFiles:\n{{ $items('List Files for Summary').map(i => i.json.name).join('\\n') }}\n\nPlease generate a short, concise summary of this folder.\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        752,
        912
      ],
      "id": "2890decd-575e-4d8f-b498-1d39cff3bd77",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "google/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        672,
        1104
      ],
      "id": "50785b53-d137-4ca8-a386-af6e8fb61277",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "z9FQrSH4C3rgJNLA",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{ $json.command }}",
        "rules": {
          "rules": [
            {
              "value2": "UPLOAD"
            },
            {
              "value2": "SUMMARY",
              "output": 1
            }
          ]
        },
        "fallbackOutput": 2
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [
        -400,
        224
      ],
      "name": "Switch Command",
      "id": "b97da20f-0d60-4ff9-9465-9fea41f9523f"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "=",
              "operation": "notEqual",
              "value2": true
            }
          ]
        }
      },
      "name": "File Exists?3",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1280,
        480
      ],
      "id": "3a7c75e2-8c56-45a7-ae68-e1cc187a4b3d"
    },
    {
      "parameters": {
        "operation": "list",
        "queryFilters": {
          "name": [
            {
              "value": "={{ $json.folder }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Get Folder ID4",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 2,
      "position": [
        432,
        496
      ],
      "id": "203847bb-e07c-4c19-b14a-a895a70512a8",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HBu1nDLTZinDtIDn",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.id !== undefined && $json.id !== ''}}",
              "value2": true
            }
          ]
        }
      },
      "name": "Folder Exists?3",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        640,
        480
      ],
      "id": "614c4cdd-55ab-4d11-9320-acdeaa1a5ce5"
    },
    {
      "parameters": {
        "operation": "list",
        "queryFilters": {
          "name": [
            {
              "value": "={{ $json.name }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Get File ID3",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 2,
      "position": [
        864,
        480
      ],
      "id": "bdedf1b8-a522-4864-807a-6e2126ffe5bd",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HBu1nDLTZinDtIDn",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const targetFileName = $items(\"Parse Command2\")[0].json.file.toLowerCase().trim();\nconst from = $items(\"Parse Command2\")[0].json.from;\nconst newName = $items(\"Parse Command2\")[0].json.newName;\n\n// Only files returned from the correct folder\nconst matchedFiles = $items(\"Get File ID3\")\n  .map(i => i.json)\n  .filter(f => f.name.toLowerCase().trim() === targetFileName);\n\nif (matchedFiles.length > 0) {\n    return [{\n        json: {\n            fileId: matchedFiles[0].id, // now this will not be null\n            fileName: matchedFiles[0].name,\n            from,\n            newName\n        }\n    }];\n} else {\n    return [{\n        json: {\n            fileId: null,\n            fileName: targetFileName,\n            from,\n            newName,\n            debugFiles: $items(\"Get File ID3\").map(i => i.json.name)\n        }\n    }];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1072,
        480
      ],
      "id": "1620fe1a-45e1-4cb1-b867-401b758ffb3e",
      "name": "Code in JavaScript5"
    },
    {
      "parameters": {
        "jsCode": "// Get updated file info from current JSON or array\nconst updatedFile = $json.files && $json.files[0] ? $json.files[0] : $json;\n\n// Determine the file name to display\nconst fileName = updatedFile.name || 'Unknown file';\n\n// Determine success (if you want to add a flag, otherwise always true)\nconst success = $json.success ?? true; \n\nreturn [{\n  json: {\n    reply: success \n      ? `‚úÖ File name updated successfully: ${fileName}` \n      : `‚ùå Failed to update file: ${fileName}`,\n    from: 'whatsapp:+14155238886',  // your sending number\n    to: $json.from                   // recipient number from workflow\n  }\n}];\n"
      },
      "name": "Send Reply4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1760,
        448
      ],
      "id": "09f509dd-2299-49ed-b08c-8926b68f20ae"
    },
    {
      "parameters": {
        "operation": "update",
        "fileId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $json.fileId }}"
        },
        "updateFields": {
          "fileName": "={{ $json.newName }}"
        },
        "options": {}
      },
      "name": "Rename File",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 2,
      "position": [
        1520,
        464
      ],
      "id": "c7e8b3de-8160-426d-bb38-668db5fe5109",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HBu1nDLTZinDtIDn",
          "name": "Google Drive account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Search Folder": {
      "main": [
        [
          {
            "node": "Get Folder ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Folder ID": {
      "main": [
        [
          {
            "node": "Folder Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Folder Exists?": {
      "main": [
        [
          {
            "node": "List Files in Folder",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format List2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Files in Folder": {
      "main": [
        [
          {
            "node": "Format List2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Send Reply2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook2": {
      "main": [
        [
          {
            "node": "Parse Command2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Command2": {
      "main": [
        [
          {
            "node": "Switch Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch Command2": {
      "main": [
        [
          {
            "node": "Search Folder",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Folder ID2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Source Folder ID",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Folder ID4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format List2": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Exists?": {
      "main": [
        [
          {
            "node": "Delete File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete File": {
      "main": [
        [
          {
            "node": "Send Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Folder ID2": {
      "main": [
        [
          {
            "node": "Folder Exists?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Folder Exists?1": {
      "main": [
        [
          {
            "node": "Get File ID1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File ID1": {
      "main": [
        [
          {
            "node": "Code in JavaScript2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Reply": {
      "main": [
        [
          {
            "node": "Send Reply2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript2": {
      "main": [
        [
          {
            "node": "File Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Source Folder ID": {
      "main": [
        [
          {
            "node": "Get File ID2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File ID2": {
      "main": [
        [
          {
            "node": "Code in JavaScript3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript3": {
      "main": [
        [
          {
            "node": "File Exists?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Exists?1": {
      "main": [
        [
          {
            "node": "Move File to Archive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move File to Archive": {
      "main": [
        [
          {
            "node": "Send Reply3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Reply3": {
      "main": [
        [
          {
            "node": "Send Reply2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Folders": {
      "main": [
        [
          {
            "node": "Check Folder Exists1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Folder Exists1": {
      "main": [
        [
          {
            "node": "Download File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File1": {
      "main": [
        [
          {
            "node": "Upload to Drive1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to Drive1": {
      "main": [
        [
          {
            "node": "Prepare Reply1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Reply1": {
      "main": [
        [
          {
            "node": "Send WhatsApp Reply2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Files for Summary": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Summary Reply": {
      "main": [
        [
          {
            "node": "Send WhatsApp Reply2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Prepare Summary Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Switch Command": {
      "main": [
        [
          {
            "node": "List Folders",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "List Files for Summary",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch Command2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Exists?3": {
      "main": [
        [
          {
            "node": "Rename File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Folder ID4": {
      "main": [
        [
          {
            "node": "Folder Exists?3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Folder Exists?3": {
      "main": [
        [
          {
            "node": "Get File ID3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File ID3": {
      "main": [
        [
          {
            "node": "Code in JavaScript5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript5": {
      "main": [
        [
          {
            "node": "File Exists?3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rename File": {
      "main": [
        [
          {
            "node": "Send Reply4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Reply4": {
      "main": [
        [
          {
            "node": "Send Reply2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "59a4e0c6-f49d-48e6-b4c1-002664898c78",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "5cf6843d1dd1a50ed4a510718fb57cc258dda5540ea5251131378a8095926e9a"
  },
  "id": "LyOAkqTZdg3RD30v",
  "tags": []
}